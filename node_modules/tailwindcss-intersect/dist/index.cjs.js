var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.js
var index_exports = {};
__export(index_exports, {
  Observer: () => observer_default,
  default: () => index_default
});
module.exports = __toCommonJS(index_exports);

// node_modules/tailwindcss/dist/plugin.mjs
function u(n, i) {
  return { handler: n, config: i };
}
u.withOptions = function(n, i = () => ({})) {
  function t(o) {
    return { handler: n(o), config: i(o) };
  }
  return t.__isOptionsFunction = true, t;
};
var g = u;

// src/plugin/index.js
var plugin_default = g(
  ({ addVariant }) => {
    addVariant("intersect", "&:not([no-intersect])");
  }
);

// src/observer/index.js
var Observer = {
  start() {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => this.observe());
      return;
    }
    this.observe();
  },
  observe() {
    const selectors = [
      '[class*=" intersect:"]',
      '[class*=":intersect:"]',
      '[class^="intersect:"]',
      '[class="intersect"]',
      '[class*=" intersect "]',
      '[class^="intersect "]',
      '[class$=" intersect"]'
    ];
    document.querySelectorAll(selectors.join(",")).forEach((element) => {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (!entry.isIntersecting) {
            element.setAttribute("no-intersect", "");
            return;
          }
          element.removeAttribute("no-intersect");
          element.classList.contains("intersect-once") && observer.disconnect();
        });
      }, {
        threshold: this.getThreshold(element)
      });
      observer.observe(element);
    });
  },
  getThreshold(element) {
    if (element.classList.contains("intersect-full")) {
      return 0.99;
    }
    if (element.classList.contains("intersect-half")) {
      return 0.5;
    }
    return 0;
  }
};
var observer_default = Observer;

// src/index.js
var index_default = plugin_default;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Observer
});
